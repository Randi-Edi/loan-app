import InputField from "@components/input/InputField";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useFormik } from "formik";
import { LoanRequestValidationSchema as validationSchema } from "~/validations/loanSubmitValidation";
import FileInput from "@components/input/FileInput";
import { useEffect, useState } from "react";
import Grid from "@mui/material/Grid";
import ClientCard from "@components/clientCard/ClientCard";
import { IClientRequest, IClientResponse } from "~/typings";
import clientManagerService from "~/services/client-manager.service";
import LoadingButton from "@mui/lab/LoadingButton";

const Home: NextPage = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [clients, setClients] = useState<IClientResponse[]>([]);

  const onSubmit = (values: IClientRequest) => {
    setLoading(true);
    setTimeout(() => {
      var bodyFormData = new FormData();
      bodyFormData.append("fullName", values.fullName);
      bodyFormData.append("amount", values.amount);
      if (values.imageUrl) bodyFormData.append("imageUrl", values.imageUrl);

      clientManagerService
        .createClient(bodyFormData)
        .then(() => {
          fetchClients();
          setLoading(false);
        })
        .catch(() => {
          setLoading(false);
        });
    }, 2000);
  };

  const fetchClients = () => {
    clientManagerService
      .getClients()
      .then((res) => {
        setClients(res.data);
      })
      .catch(() => {
        setClients([]);
      });
  };
  useEffect(fetchClients, []);

  const formik = useFormik({
    initialValues: {
      amount: "",
      fullName: "",
      imageUrl: null,
    },
    validationSchema: validationSchema,
    onSubmit,
  });

  const formatNumber = (number: string) => {
    return number ? Number(number).toFixed(2) : "";
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>BridgeFund</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
        <Grid item xs={12} md={6}>
          <section className={styles.main}>
            <h1 className={styles.title}>Welcome to BridgeFund</h1>
            <h1 className={styles.subtitle}>Make money smile</h1>

            <p className={styles.description}>Arrange a business loan up to â‚¬250,000 quickly and easily</p>

            <div className={styles.grid}>
              <div className={styles.card}>
                <h2>How much do you need?</h2>
                <form onSubmit={formik.handleSubmit}>
                  <InputField
                    size="small"
                    sx={{
                      width: {
                        xs: "100%",
                        sm: "400px",
                      },
                    }}
                    placeholder="25000.00"
                    isCurrencyInput={true}
                    onChange={formik.handleChange}
                    onBlur={(event: React.FocusEvent<HTMLInputElement>) => formik.setFieldValue("amount", formatNumber(event.target.value))}
                    fieldName="amount"
                    value={formik.values.amount}
                    type="number"
                    touched={formik.touched.amount}
                    error={formik.errors.amount}
                  />
                  <br />
                  <h2>Personal Info</h2>
                  <InputField
                    size="small"
                    sx={{
                      width: {
                        xs: "100%",
                        sm: "400px",
                      },
                    }}
                    placeholder="Full Name"
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    fieldName="fullName"
                    value={formik.values.fullName}
                    type="text"
                    touched={formik.touched.fullName}
                    error={formik.errors.fullName}
                  />
                  <br />
                  <h2>Upload KYC</h2>
                  <FileInput
                    fieldName="imageUrl"
                    onChange={(event) => {
                      console.log(event);
                      formik.setFieldValue("imageUrl", event.currentTarget.files && event.currentTarget.files[0]);
                    }}
                    touched={formik.touched.imageUrl}
                    error={formik.errors.imageUrl}
                  />
                  <br />
                  <LoadingButton
                    variant="contained"
                    type="submit"
                    fullWidth
                    sx={{
                      borderRadius: "100px",
                      px: "46px",
                      py: "10px",
                      textTransform: "capitalize",
                      fontSize: "18px",
                      lineHeight: "28px",
                      backgroundColor: "#00997f",
                      float: "right",
                      ":hover": {
                        bgcolor: "#00997f",
                      },
                    }}
                    loading={loading}
                    loadingIndicator="Please wait..."
                  >
                    Submit Request
                  </LoadingButton>
                </form>
              </div>
            </div>
          </section>
        </Grid>
        <Grid item xs={12} md={6}>
          <section style={{ paddingTop: 20 }}>
            {clients.map((item, index) => {
              return <ClientCard key={index} amount={Number(item.amount).toFixed(2)} imageUrl={item.imageUrl} fullName={item.fullName} />;
            })}
          </section>
        </Grid>
      </Grid>

      <footer className={styles.footer}>Powered by Rushan</footer>
    </div>
  );
};

export default Home;
